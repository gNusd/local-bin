#!/usr/bin/env bash

 #####  #    # #    #  ####  License: GNU GPLv3
 #    # ##   # #    # #      Year: 2021
 #      # #  # #    #  ####
 #  ### #  # # #    #      # https://github.com/gnusd
 #    # #   ## #    # #    # http://gnusd.xyz
 #####  #    #  ####   ####

# FILENAME: play-dl

# check which flags are passed
FLAG_1="$(echo "$1" | grep  '-')"
FLAG_2="$(echo "$2" | grep  '-')"
DEBUG=true

# paths to different download related stuff
DIR_PATH="$HOME/mnt/downloads/play-dl"
DL_FROM_FILE_DIR="$HOME/mnt/downloads/play-dl/files"
DL_FILE="urls"
LOG_FILE="logs-dl"

# date for log, I like varibles
DATE="$(date '+%Y-%m-%d')"

# select paths
if [[ "$DEBUG" == true ]]
then 
	#development paths
	VIDEO_PATH="$DL_FROM_FILE_DIR/video/filmer"
	DOC_PATH="$DL_FROM_FILE_DIR/video/documentaries"
	TV_SERIES_PATH="$DL_FROM_FILE_DIR/video/tv-serier"
else
	#destination paths for video and dockumentaries
	VIDEO_PATH="$HOME/mnt/video/filmer"
	DOC_PATH="$HOME/mnt/video/dokumentÃ¤rer/filmer"
	TV_SERIES_PATH="$HOME/mnt/video/tv-serier"
fi

# checking which flag if any is passed
sort_flags () {
		if [ -n "$FLAG_1" ]
		then
				FLAG="$FLAG_1"

		elif [ -n "$FLAG_2" ]
		then
				FLAG="$FLAG_2"

		fi
		export FLAG
}

#removing line from urls file after download is done
delete_line () {
		sed -i '/$1/d' "$DL_FROM_FILE_DIR/$DL_FILE"
}

# write to log file
write_log () {
		printf "%s \t %s \t [%s]\n"   "$DATE" "$1" "$FLAG" >> "$DL_FROM_FILE_DIR/$LOG_FILE"
}

create_dl_dir () {
	svt="$(echo "$1" | grep svt)"
	tv4="$(echo "$1" | grep tv4)"

	if [[ ! -z "$svt" ]]
	then
		name="$(echo "$svt" | sed 's#.*/##')"
		TITLE="$(echo "$name" | sed 's/-/_/g')"
	elif [[ ! -z "$tv4" ]]
	then
		name="$(echo "$tv4" | sed s'/^.*program\/\(.*\)\/.*\/.*/\1/g')"
		TITLE="$(echo "$name" | sed s'/-/_/g')"
	fi
	mkdir "$DIR_PATH/$TITLE" 
	export TITLE
	if [[ "$FLAG" == "-f" ]] || [[ "$FLAG" == "-d" ]]
	then 
		DL="svtplay-dl --subtitle --nfo --thumbnail --filename {title}.{ext} --output $TITLE"
	elif [[ "$FLAG" == "-s" ]]
	then
		DL="svtplay-dl --subtitle --nfo --thumbnail --all-episodes --filename {title}_s{season}e{episode}.{ext} --output $TITLE"
	fi
	export DL
}
# renaming and moving to the correct directory
move () {
			
	dir_name="$TITLE"
	# checking if the destination is video or documentary
	if [[ "$FLAG" == "-f" ]]
	then
		mv "$DIR_PATH/$dir_name" "$VIDEO_PATH/"

	elif [[ "$FLAG" == "-d" ]]
	then
		mv "$DIR_PATH/$dir_name" "$DOC_PATH/"
	elif [[ "$FLAG" == "-s" ]]
	then 
		cd "$DIR_PATH/$dir_name" || exit
		seasons="$(ls *.mp4 | sed s'/.*_s\(..\).*/\1/'| uniq)"
		title="$(ls *.mp4 | sed s'/\(.*\)_s.*/\1/'| uniq)"

		for num in "${seasons[@]}"
		do
			mkdir "$DIR_PATH/$dir_name/season_${num}"
			mv "$DIR_PATH/$dir_name/${title}_s${num}"* "$DIR_PATH/$dir_name/season_${num}"
		done
		mv "$DIR_PATH/$dir_name" "$TV_SERIES_PATH/"
	fi
}

# read the urls file
read_download () {
		while read -r line
		do
				create_dl_dir "$line"
				eval "$DL" "$line" 
				move
				delete_line "$line"
				write_log "$line"
		done < "$DL_FROM_FILE_DIR/$DL_FILE"

}

backup_url_file () {
	cp "$DL_FROM_FILE_DIR/$DL_FILE" "$DL_FROM_FILE_DIR/$DL_FILE".bak
}

cd "$DIR_PATH" || exit

sort_flags

# if there is no flag 
if [[ "$FLAG" == "-f" ]] || [[ "$FLAG" == "-d" ]] || [[ "$FLAG" == "-s" ]]
then
		if [ -s "$DL_FROM_FILE_DIR/$DL_FILE" ]
		then
        		backup_url_file
				export FLAG
				read_download
		else
				echo "URLS file is empthy"
		fi
# if there is no flag and no url
else
		echo "No flags and no url, nothing to do."
fi

unset VIA_USER
unset VIA_PASS
unset FLAG
unset TITLE