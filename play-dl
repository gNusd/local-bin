#!/usr/bin/env bash

 #####  #    # #    #  ####  License: GNU GPLv3
 #    # ##   # #    # #      Year: 2021
 #      # #  # #    #  ####
 #  ### #  # # #    #      # https://github.com/gnusd
 #    # #   ## #    # #    # http://gnusd.xyz
 #####  #    #  ####   ####

# FILENAME: play-dl

# check which flags are passed
FLAG_1="$(echo "$1" | grep  '-')"
FLAG_2="$(echo "$2" | grep  '-')"

# paths to base directory for download and files directory
# I use the same paths for debug mode
DIR_PATH="${HOME}/mnt/downloads/play-dl"
DL_FROM_FILE_DIR="${DIR_PATH}/files"
DL_FILE="urls"
LOG_FILE="logs-dl"

# date for log, I like varibles
DATE="$(date '+%Y-%m-%d')"

paths_to_dirs () {
# select paths for moving the downloaded files 
		if [[ "$DEBUG" == true ]]
		then 
			#development paths
			VIDEO_PATH="${DL_FROM_FILE_DIR}/video/filmer"
			DOC_PATH="${DL_FROM_FILE_DIR}/video/documentaries"
			TV_SERIES_PATH="${DL_FROM_FILE_DIR}/video/tv-serier"
			export LOG_FILE="DEBUG_logs-dl"
		else
			#production paths
			VIDEO_PATH="${HOME}/mnt/video/filmer"
			DOC_PATH="${HOME}/mnt/video/dokumentärer/filmer"
			TV_SERIES_PATH="${HOME}/mnt/video/tv-serier"
		fi
}
# checking which flag if any is passed
sort_flags () {
		if [[ -n "$FLAG_1" ]]
		then
				FLAG="$FLAG_1"
		elif [[ -n "$FLAG_2" ]]
		then
				FLAG="$FLAG_2"
		# check debug mode in flags 
		fi
		if [[ "$FLAG" == "-fd" ]] || [[ "$FLAG" == "-df" ]]
		then
			DEBUG=true
			FLAG="-f"
		elif [[ "$FLAG" == "-dd" ]]
		then 
			DEBUG=true
			FLAG="-d"
		elif [[ "$FLAG" == "-sd" ]] || [[ "$FLAG" == "-ds" ]]
		then
			DEBUG=true
			FLAG="-s"
		fi
		export FLAG
}

#removing line from urls file after download is done
# TODO: correct error from the delete_line function, it deletes the line but complains about permissions  
delete_line () {
		sed -i '/${1}/d' "${DL_FROM_FILE_DIR}/${DL_FILE}"
}

# write to log file
write_log () {
		printf "%s \t %s \t [%s]\n"   "$DATE" "$1" "$FLAG" >> "${DL_FROM_FILE_DIR}/${LOG_FILE}"
}

create_dl_dir () {
	svt="$(echo "$1" | grep svt)"
	tv4="$(echo "$1" | grep tv4)"

	if [[ ! -z "$svt" ]]
	then 
		url="$svt"
	elif [[ ! -z "$tv4" ]]
	then
		url="$tv4"
	fi

	name="$(echo "$url" | sed 's#.*/##')"
	TITLE="$(echo "$name" | sed 's/-/_/g' | sed 's/%C3%A5/å/g' | sed 's/%C3%A4/ä/g' | sed 's/%C3%B6/ö/g')"
	mkdir "${DIR_PATH}/${TITLE}" 
	export TITLE
	if [[ "$FLAG" == "-f" ]] || [[ "$FLAG" == "-d" ]]
	then 
		if [[ ! -z "$svt" ]]
		then
			DL="svtplay-dl --subtitle --nfo --filename {title}.{ext} --output ${TITLE}"
		elif [[ ! -z "$tv4" ]]
		then 
			DL="svtplay-dl --subtitle --nfo --all-episodes --filename {title}.{ext} --output ${TITLE}"
		fi
	elif [[ "$FLAG" == "-s" ]]
	then
		DL="svtplay-dl --subtitle --nfo --all-episodes --filename {title}_s{season}e{episode}.{ext} --output ${TITLE}"
	fi
	export DL
}

# renaming and moving to the correct directory
move () {		
	dir_name="$TITLE"
	# checking if the destination is video or documentary
	if [[ "$FLAG" == "-f" ]]
	then
		mv "${DIR_PATH}/${dir_name}" "${VIDEO_PATH}/"

	elif [[ "$FLAG" == "-d" ]]
	then
		mv "${DIR_PATH}/${dir_name}" "${DOC_PATH}/"
	elif [[ "$FLAG" == "-s" ]]
	then 
		cd "${DIR_PATH}/${dir_name}" || exit
		S="$(ls *.mp4 | sed s'/.*_s\(..\).*/\1/'| uniq | tr " " "\n")"
		title="$(ls *.mp4 | sed s'/\(.*\)_s.*/\1/'|uniq)"
		
		#TODO: this part should be written in a simpler way, needs a rewrite
		n=0
		b=1
		for i in ${S[@]}; do let "n=n+1"; done
		for num in $(eval echo {$b..$n});
		do
			if [[ "$num" > 9 ]]
			then 
				season="$num"
			else 
				season="0${num}"
			fi
			mkdir "${DIR_PATH}/${dir_name}/season_${season}"
			mv "${DIR_PATH}/${dir_name}/${title}_s${season}"* "${DIR_PATH}/${dir_name}/season_${season}"
		done
		mv "${DIR_PATH}/${dir_name}" "${TV_SERIES_PATH}/"
	fi
}

# read the urls file
read_download () {
		while read -r line
		do
				create_dl_dir "$line"
				eval "$DL" "$line" 
				move
				delete_line "$line"
				write_log "$line" 
		done < "${DL_FROM_FILE_DIR}/${DL_FILE}"

}

backup_url_file () {
	cp "${DL_FROM_FILE_DIR}/${DL_FILE}" "${DL_FROM_FILE_DIR}/${DL_FILE}".bak
}

cd "$DIR_PATH" || exit

sort_flags
paths_to_dirs

echo "$DEBUG"
# if there is no flag 
if [[ "$FLAG" == "-f" ]] || [[ "$FLAG" == "-d" ]] || [[ "$FLAG" == "-s" ]]
then
		if [ -s "${DL_FROM_FILE_DIR}/${DL_FILE}" ]
		then
        		backup_url_file
				export FLAG
				read_download
		else
				echo "urls file is empthy"
		fi
# if there is no flag and no url
else
		echo "No flags, nothing to do."
fi

unset DL
unset FLAG
unset TITLE
unset LOG_FILE