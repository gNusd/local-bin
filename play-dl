#!/usr/bin/env bash

 #####  #    # #    #  ####  License: GNU GPLv3
 #    # ##   # #    # #      Year: 2021
 #      # #  # #    #  ####
 #  ### #  # # #    #      # https://github.com/gnusd
 #    # #   ## #    # #    # http://gnusd.xyz
 #####  #    #  ####   ####

# FILENAME: play-dl

# check which flags are passed
FLAG_1="$(echo "$1" | grep -E '^-')"
FLAG_2="$(echo "$1" | grep -E '^-')"
URL_1="$(echo "$1" | grep -E '^(http|https)://')"
URL_2="$(echo "$2" | grep -E '^(http|https)://')"

# paths to different download related stuff
DIR_PATH="$HOME/mnt/bob/downloads/play-dl"
DL_FROM_FILE_DIR="$HOME/mnt/bob/downloads/play-dl/files"
DL_FILE="urls"
LOG_FILE="logs-dl"

# username and password for viafree
source $HOME/bin/SECRETS

# date for log, I like varibles
DATE="$(date)"

# destination paths for video and dockumentaries
VIDEO_PATH="$HOME/mnt/bob/video"
DOC_PATH="$HOME/mnt/bob/documentaries"

# download methods
METHOD_SVTPLAY="svtplay-dl"
METHOD_TV4="youtube-dl --restrict-filenames"
METHOD_VIAFREE="svtplay-dl -u "$VIA_USER" -p "$VIA_PASS""

#check for where the URL are
sort_urls () {
		if [ -n "$URL_1" ]
		then
				URL="$URL_1"
		elif [ -n "$URL_2" ]
		then
				URL="$URL_2"
		elif [ -n "$1" ]
		then
				URL="$1"
		fi

		# checking what site to download from
		case "$URL" in
				*svt*)
						DL="$METHOD_SVTPLAY"
						echo "$DL"
						;;
				*tv4*)
						DL="$METHOD_TV4"
						echo "$DL"
						;;
				*viafree*)
						DL="$METHOD_VIAFREE"
						echo "$DL"
						;;
		esac
}

# checking which flag if any is passed
sort_flags () {
		if [ -n "$FLAG_1" ]
		then
				FLAG="$FLAG_1"

		elif [ -n "$FLAG_2" ]
		then
				FLAG="$FLAG_2"

		fi
		export FLAG
}

#removing line from urls file after download is done
comment_out_line () {
		sed -i '1d' "$DL_FROM_FILE_DIR/$DL_FILE"
}

# write to log file
write_log () {
		printf "%s %s \t %s \t (%s)\n"   "$DATE" "$1" "$FLAG" "$2" >> "$DL_FROM_FILE_DIR/$LOG_FILE"
}

# renaming and moving to the correct directory
rename_move () {
		# get file identifyer
		file_id="$(echo "$1" | sed 's#.*/##')"
		# get mp4 filesname
		lmf="$(/usr/bin/ls | grep "$file_id" | grep mp4)"

		# create a new name for the file
		dir_name="$(echo "$lmf" | sed s'/-.*//g;s/\./_/g')"
		nfn="$dir_name".mp4

		# checking if the destination is video or documentary
		if [ "$FLAG" == "-f" ]
		then
				[ ! -d "$VIDEO_PATH/$dir_name" ] && mkdir "$VIDEO_PATH/$dir_name"
				[ ! -f "$VIDEO_PATH/$dir_name/$nfn" ] && mv "$DIR_PATH/$lmf" "$VIDEO_PATH/$dir_name/$nfn"

		elif [ "$FLAG" == "-d" ]
		then
				[ ! -d "$DOC_PATH/$dir_name" ] && mkdir "$DOC_PATH/$dir_name"
				[ ! -f "$DOC_PATH/$dir_name/$nfn" ] && mv "$DIR_PATH/$lmf" "$DOC_PATH/$dir_name/$nfn"
		fi
}

# read the urls file
read_download () {
		while read -r line
		do
				DL="$(sort_urls "$line")"
				eval "$DL" "$line"
				rename_move

				comment_out_line
				write_log "$nfn" "$line"
		done < "$DL_FROM_FILE_DIR/$DL_FILE"

}

cd "$DIR_PATH" || exit

FLAG="$(sort_flags)"

# if there is no flag passed check if there is a url
if [ -z "$FLAG" ]
then
		sort_urls
# if there is a flag
elif [[ "$FLAG" == "-f" ]] || [[ "$FLAG" == "-d" ]]
then
		if [ -s "$DL_FROM_FILE_DIR/$DL_FILE" ]
		then
				cp "$DL_FROM_FILE_DIR/$DL_FILE" "$DL_FROM_FILE_DIR/$DL_FILE"
				export FLAG
				read_download
		else
				echo "URLS file is empthy"
		fi

# if there is no flag and no url
else
		echo "No flags and no url, nothing to do."
fi
