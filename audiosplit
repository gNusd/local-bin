#!/usr/bin/env bash

  ####   #    # #    #  ####  License: GNU GPLv3
  #    # ##   # #    # #      Year: 2020
  #      # #  # #    #  ####
  #  ### #  # # #    #      # https://github.com/gnusd
  #    # #   ## #    # #    # http://gnusd.xyz
  ####   #    #  ####   ####

# FILENAME: audiosplit

split () {
		if [[ ! -z "$CUE_FILE" || ! -z "$AUDIO_FILE" ]]
		then
				cuebreakpoints "$CUE_FILE" | shnsplit -o flac "$AUDIO_FILE"
				cuetag "$CUE_FILE" split-track*.flac
		fi
}

check_cue () {
		# counting number of cue files
		num_cue_file="$(ls | grep -c \.cue$)"

		# if there are more than one cue file
		if [ "$num_cue_file" -gt 1 ]
		then
				num_track_array=()
				name_cue_array=()
				for file in *.cue
				do
						num_tracks="$(cat "$file" | grep -c TRACK)"
						num_track_array+=("$num_tracks")

						clean_file="$(echo $file | sed 's/[^0-9a-zA-Z.]/_/g')"
						if [[ -z "$name_cue_array" || ! " ${name_cue_array[@]} " =~ " ${clean_file} " ]]
						then
								if [[ "$file" != "$clean_file" ]]
								then
										mv "$file" "$clean_file"
										name_cue_array+=("$clean_file")
								else
										name_cue_array+=("$file")
								fi
						fi
				done

				# check if number of tracks are the same, if same varible is empthy
				comp="$(echo ${num_track_array[@]} | tr ' ' '\n' | sort | uniq -u)"
				if [ -z "$comp" ]
				then
						mv  "${name_cue_array[0]}" "${name_cue_array[0]}".bak
						export CUE_FILE="${name_cue_array[1]}"
				else
						echo "cue files don't match"
				fi
		else
				name_cue_file="$(ls | grep \.cue$)"
				cue_name="$(echo $name_cue_file | sed 's/[^0-9a-zA-Z.]/_/g')"
				if [ "$name_cue_file" != "$cue_name" ]
				then
						mv "$name_cue_file" "$cue_name"
						export CUE_FILE="$cue_name"
				fi
				num_tracks="$(cat "$name_cue_file" | grep -c TRACK)"
				if [ "$num_tracks" -lt 1 ]
				then
						echo "Probably not a cue file"
				elif [ "$num_tracks" == 1 ]
				then
						echo "Check cue sheet, possible only one track."
				else
						export CUE_FILE="$name_cue_file"
				fi
		fi
}

check_audio () {

		non_flac_files=0
		flac_file=0
		for aufile in ".flac" ".m4a" ".ape" ".wav"
		do
				ext="${aufile##*.}"
				if [ "$ext" == "flac" ]
				then
						let "$flac_file++"
				else
						let "$non_flac_files++"
				fi
				export AUDIO_FILE="$aufile"
		done
		let "num_audio_files=$non_flac_files + $flac_file"

		if [ "$num_audio_files" -gt 1 ]
		then
				num=0
				for aufile in ".m4a" ".ape" ".wav"
				do
						let "num++"
				done
				if [ "$num" > 1 ]
				then
						for nonflac in ".m4a" ".ape" ".wav"
						do
								AUDIO_FILE="$nonflac"
								toflac
						done
				fi
				unset_local_varibles
		else
				if [ "$non_flac_files" == 1 ]
				then
						toflac
				else
						audio_name="$(echo $AUDIO_FILE | sed 's/[^0-9a-zA-Z.]/_/g')"
						if [ "$AUDIO_FILE" != "$audio_name" ]
						then
								mv "$AUDIO_FILE" "$audio_name"
								export AUDIO_FILE="$audio_name"
						fi
						bitrate=$(mediainfo "$AUDIO_FILE" | grep "depth" | sed 's/[^0-9]*//g')

						if [ "$bitrate" -gt 16 ]
						then
								tmp_file="${AUDIO_FILE%%.*}tmp.flac"
								cp "$AUDIO_FILE" "$tmp_file" && rm "$AUDIO_FILE"
								ffmpeg -i "$tmp_file" -af aformat=s16:44100 "$AUDIO_FILE" && rm "$tmp_file"
						fi
				fi
		fi
}

check () {
		check_cue
		check_audio
}

delete () {
		printf '%s' "Delete flac & cue file [y/N] "
		read -r response

		if [ "$response" != "${response#[Yy]}" ]
		then
				rm "$AUDIO_FILE" "$CUE_FILE"
		else
				mv "$AUDIO_FILE" "$AUDIO_FILE".bak
		fi
}

beets () {
		printf '%s' "Import to beets  [y/N] "
		read -r response

		if [ "$response" != "${response#[Yy]}" ]
		then
				beet import .
		fi
}

unset_local_varibles () {
		unset CUE_FILE
		unset AUDIO_FILE
}

for file in *.flac *.m4a *.ape *.wav
do
		export AUDIO_FILE="$file"
		check
		split
		delete
		beets
done

unset_local_varibles
